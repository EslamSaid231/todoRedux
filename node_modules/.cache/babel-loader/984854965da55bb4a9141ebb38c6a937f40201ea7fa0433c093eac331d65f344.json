{"ast":null,"code":"import { createSlice, configureStore } from \"@reduxjs/toolkit\";\nimport TasksList from \"../component/Tasks/TasksList\";\nconst initialState = {\n  todos: []\n};\nfunction nextTodoId(todos) {\n  const maxId = todos.reduce((maxId, todo) => Math.max(todo.id, maxId), -1);\n  return maxId + 1;\n}\nconst taskSlice = createSlice({\n  name: \"tasks\",\n  initialState: initialState,\n  reducers: {\n    addTask(state, action) {\n      return {\n        ...state,\n        todos: [...state.todos, {\n          id: nextTodoId(state.todos),\n          task: action.payload,\n          completed: false\n        }]\n      };\n    },\n    AppendTask(state, action) {\n      return {\n        ...state,\n        todos: [...state.todos, action.payload]\n      };\n    },\n    deleteTask(state, action) {\n      return {\n        ...state,\n        todos: state.todos.filter(todo => todo.id !== action.payload)\n      };\n    },\n    CompletedTask(state, action) {\n      const index = state.todos.findIndex(todo => todo.id !== action.payload);\n      const newArray = [...state.todos];\n      newArray[index].completed = true;\n      return {\n        ...state,\n        todos: newArray,\n        completed: true\n      };\n    }\n  }\n});\nconst store = configureStore({\n  reducer: {\n    tasks: taskSlice.reducer\n  }\n});\nexport const tasksActions = taskSlice.actions;\nexport default store;\n\n// return { ...state, todos: [action.payload, ...state.todos] };\n\n// import { createSlice, configureStore } from \"@reduxjs/toolkit\";\n\n// const initialCounterState = { counter: 0, showCounter: true };\n\n// const counterSlice = createSlice({\n//   name: \"counter\",\n//   initialState: initialCounterState,\n//   reducers: {\n//     increment(state) {\n//       state.counter++;\n//     },\n//     decrement(state) {\n//       state.counter--;\n//     },\n//     increase(state, action) {\n//       state.counter = action.payload;\n//     },\n//     toggleCounter(state) {\n//       state.showCounter = !state.showCounter;\n//     },\n//   },\n// });\n// const initialAuthState = {\n//   isAuthenticated: false,\n// };\n// const authSlice = createSlice({\n//   name: \"authentication\",\n//   initialState: initialAuthState,\n//   reducers: {\n//     login(state) {\n//       state.isAuthenticated = true;\n//     },\n//     logout(state) {\n//       state.isAuthenticated = false;\n//     },\n//   },\n// });\n\n// const store = configureStore({\n//   reducer: { counter: counterSlice.reducer, auth: authSlice.reducer },\n// });\n\n// export const counterActions = counterSlice.actions;\n// export const authActions = authSlice.actions;\n// export default store;\n\n// const counterReducer = (state = initialState, action) => {\n//   if (action.type === \"increment\") {\n//     return {\n//       counter: state.counter + 1,\n//       showCounter: state.showCounter,\n//     };\n//   }\n//   if (action.type === \"decrement\") {\n//     return { counter: state.counter - 1, showCounter: state.showCounter };\n//   }\n//   if (action.type === \"increase\") {\n//     return {\n//       counter: state.counter + action.amount,\n//       showCounter: state.showCounter,\n//     };\n//   }\n//   if (action.type === \"toggle\") {\n//     return {\n//       showCounter: !state.showCounter,\n//       counter: state.counter,\n//     };\n//   }\n//   return state;\n// };\n\n// const store = configureStore({\n//   reducer: {counter: counterSlice.reducer, anotherReducer: anotherSlice.reducer}\n// });","map":{"version":3,"names":["createSlice","configureStore","TasksList","initialState","todos","nextTodoId","maxId","reduce","todo","Math","max","id","taskSlice","name","reducers","addTask","state","action","task","payload","completed","AppendTask","deleteTask","filter","CompletedTask","index","findIndex","newArray","store","reducer","tasks","tasksActions","actions"],"sources":["E:/Shiko/GoMyCode/React course/Redux/Redux checkpoint todoList/src/Store/index.js"],"sourcesContent":["import { createSlice, configureStore } from \"@reduxjs/toolkit\";\r\nimport TasksList from \"../component/Tasks/TasksList\";\r\n\r\nconst initialState = { todos: [] };\r\nfunction nextTodoId(todos) {\r\n  const maxId = todos.reduce((maxId, todo) => Math.max(todo.id, maxId), -1);\r\n  return maxId + 1;\r\n}\r\nconst taskSlice = createSlice({\r\n  name: \"tasks\",\r\n  initialState: initialState,\r\n  reducers: {\r\n    addTask(state, action) {\r\n      return {\r\n        ...state,\r\n        todos: [\r\n          ...state.todos,\r\n          {\r\n            id: nextTodoId(state.todos),\r\n            task: action.payload,\r\n            completed: false,\r\n          },\r\n        ],\r\n      };\r\n    },\r\n    AppendTask(state, action) {\r\n      return {\r\n        ...state,\r\n        todos: [...state.todos, action.payload],\r\n      };\r\n    },\r\n    deleteTask(state, action) {\r\n      return {\r\n        ...state,\r\n        todos: state.todos.filter((todo) => todo.id !== action.payload),\r\n      };\r\n    },\r\n    CompletedTask(state, action) {\r\n      const index = state.todos.findIndex((todo) => todo.id !== action.payload);\r\n      const newArray = [...state.todos];\r\n      newArray[index].completed = true;\r\n      return {\r\n        ...state,\r\n        todos: newArray,\r\n        completed: true,\r\n      };\r\n    },\r\n  },\r\n});\r\n\r\nconst store = configureStore({\r\n  reducer: { tasks: taskSlice.reducer },\r\n});\r\nexport const tasksActions = taskSlice.actions;\r\nexport default store;\r\n\r\n// return { ...state, todos: [action.payload, ...state.todos] };\r\n\r\n// import { createSlice, configureStore } from \"@reduxjs/toolkit\";\r\n\r\n// const initialCounterState = { counter: 0, showCounter: true };\r\n\r\n// const counterSlice = createSlice({\r\n//   name: \"counter\",\r\n//   initialState: initialCounterState,\r\n//   reducers: {\r\n//     increment(state) {\r\n//       state.counter++;\r\n//     },\r\n//     decrement(state) {\r\n//       state.counter--;\r\n//     },\r\n//     increase(state, action) {\r\n//       state.counter = action.payload;\r\n//     },\r\n//     toggleCounter(state) {\r\n//       state.showCounter = !state.showCounter;\r\n//     },\r\n//   },\r\n// });\r\n// const initialAuthState = {\r\n//   isAuthenticated: false,\r\n// };\r\n// const authSlice = createSlice({\r\n//   name: \"authentication\",\r\n//   initialState: initialAuthState,\r\n//   reducers: {\r\n//     login(state) {\r\n//       state.isAuthenticated = true;\r\n//     },\r\n//     logout(state) {\r\n//       state.isAuthenticated = false;\r\n//     },\r\n//   },\r\n// });\r\n\r\n// const store = configureStore({\r\n//   reducer: { counter: counterSlice.reducer, auth: authSlice.reducer },\r\n// });\r\n\r\n// export const counterActions = counterSlice.actions;\r\n// export const authActions = authSlice.actions;\r\n// export default store;\r\n\r\n// const counterReducer = (state = initialState, action) => {\r\n//   if (action.type === \"increment\") {\r\n//     return {\r\n//       counter: state.counter + 1,\r\n//       showCounter: state.showCounter,\r\n//     };\r\n//   }\r\n//   if (action.type === \"decrement\") {\r\n//     return { counter: state.counter - 1, showCounter: state.showCounter };\r\n//   }\r\n//   if (action.type === \"increase\") {\r\n//     return {\r\n//       counter: state.counter + action.amount,\r\n//       showCounter: state.showCounter,\r\n//     };\r\n//   }\r\n//   if (action.type === \"toggle\") {\r\n//     return {\r\n//       showCounter: !state.showCounter,\r\n//       counter: state.counter,\r\n//     };\r\n//   }\r\n//   return state;\r\n// };\r\n\r\n// const store = configureStore({\r\n//   reducer: {counter: counterSlice.reducer, anotherReducer: anotherSlice.reducer}\r\n// });\r\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,cAAc,QAAQ,kBAAkB;AAC9D,OAAOC,SAAS,MAAM,8BAA8B;AAEpD,MAAMC,YAAY,GAAG;EAAEC,KAAK,EAAE;AAAG,CAAC;AAClC,SAASC,UAAU,CAACD,KAAK,EAAE;EACzB,MAAME,KAAK,GAAGF,KAAK,CAACG,MAAM,CAAC,CAACD,KAAK,EAAEE,IAAI,KAAKC,IAAI,CAACC,GAAG,CAACF,IAAI,CAACG,EAAE,EAAEL,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC;EACzE,OAAOA,KAAK,GAAG,CAAC;AAClB;AACA,MAAMM,SAAS,GAAGZ,WAAW,CAAC;EAC5Ba,IAAI,EAAE,OAAO;EACbV,YAAY,EAAEA,YAAY;EAC1BW,QAAQ,EAAE;IACRC,OAAO,CAACC,KAAK,EAAEC,MAAM,EAAE;MACrB,OAAO;QACL,GAAGD,KAAK;QACRZ,KAAK,EAAE,CACL,GAAGY,KAAK,CAACZ,KAAK,EACd;UACEO,EAAE,EAAEN,UAAU,CAACW,KAAK,CAACZ,KAAK,CAAC;UAC3Bc,IAAI,EAAED,MAAM,CAACE,OAAO;UACpBC,SAAS,EAAE;QACb,CAAC;MAEL,CAAC;IACH,CAAC;IACDC,UAAU,CAACL,KAAK,EAAEC,MAAM,EAAE;MACxB,OAAO;QACL,GAAGD,KAAK;QACRZ,KAAK,EAAE,CAAC,GAAGY,KAAK,CAACZ,KAAK,EAAEa,MAAM,CAACE,OAAO;MACxC,CAAC;IACH,CAAC;IACDG,UAAU,CAACN,KAAK,EAAEC,MAAM,EAAE;MACxB,OAAO;QACL,GAAGD,KAAK;QACRZ,KAAK,EAAEY,KAAK,CAACZ,KAAK,CAACmB,MAAM,CAAEf,IAAI,IAAKA,IAAI,CAACG,EAAE,KAAKM,MAAM,CAACE,OAAO;MAChE,CAAC;IACH,CAAC;IACDK,aAAa,CAACR,KAAK,EAAEC,MAAM,EAAE;MAC3B,MAAMQ,KAAK,GAAGT,KAAK,CAACZ,KAAK,CAACsB,SAAS,CAAElB,IAAI,IAAKA,IAAI,CAACG,EAAE,KAAKM,MAAM,CAACE,OAAO,CAAC;MACzE,MAAMQ,QAAQ,GAAG,CAAC,GAAGX,KAAK,CAACZ,KAAK,CAAC;MACjCuB,QAAQ,CAACF,KAAK,CAAC,CAACL,SAAS,GAAG,IAAI;MAChC,OAAO;QACL,GAAGJ,KAAK;QACRZ,KAAK,EAAEuB,QAAQ;QACfP,SAAS,EAAE;MACb,CAAC;IACH;EACF;AACF,CAAC,CAAC;AAEF,MAAMQ,KAAK,GAAG3B,cAAc,CAAC;EAC3B4B,OAAO,EAAE;IAAEC,KAAK,EAAElB,SAAS,CAACiB;EAAQ;AACtC,CAAC,CAAC;AACF,OAAO,MAAME,YAAY,GAAGnB,SAAS,CAACoB,OAAO;AAC7C,eAAeJ,KAAK;;AAEpB;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}