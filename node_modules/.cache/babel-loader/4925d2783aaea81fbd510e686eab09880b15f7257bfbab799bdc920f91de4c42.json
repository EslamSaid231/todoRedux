{"ast":null,"code":"var _jsxFileName = \"E:\\\\Shiko\\\\Udemy\\\\React complete guide\\\\Projects\\\\react-guide\\\\src\\\\Components\\\\NewExpense\\\\ExpenseForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./ExpenseForm.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ExpenseForm = () => {\n  _s();\n  const [userInput, setUserInput] = useState({\n    enteredTitle: \"\",\n    enteredAmount: \"\",\n    enteredDate: \"\"\n  });\n  const titleChangeHandler = event => {\n    setUserInput(prevState => {\n      return {\n        ...prevState,\n        enteredTitle: event.target.value\n      };\n    });\n  };\n  const amountChangeHandler = e => {\n    setUserInput(prevState => {\n      return {\n        ...prevState,\n        enteredAmount: e.target.value\n      };\n    });\n    const dateChangeHandler = e => {\n      setUserInput(prevState => {\n        return {\n          ...prevState,\n          enteredDate: e.target.value\n        };\n      });\n    };\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"new-expense__control\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Title\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 27,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            onChange: titleChangeHandler\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 28,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"new-expense__control\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Amount\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            min: \"0.01\",\n            step: \"0.01\",\n            onChange: amountChangeHandler\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"$\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"new-expense__control\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"date\",\n            min: \"2019-01-01\",\n            max: \"2022-12-31\",\n            onChange: dateChangeHandler\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__actions\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Add Expense\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this);\n  };\n};\n_s(ExpenseForm, \"d6pWLpJgjJWBnqk3c5PozzZEARk=\");\n_c = ExpenseForm;\nexport default ExpenseForm;\n\n/*using multiple states   // const [enteredTitle, setEnteredTitle] = useState(\"\");\r\n  // const [enteredDate, setEnteredDate] = useState(\"\");\r\n  // const [enteredAmount, setEnteredAmount] = useState(\"\");\r\n */\n\n//using single state as an object\n// const [userInput, setUserInput] = useState({\n//   enteredTitle: \"\",\n//   enteredAmount: \"\",\n//   enteredDate: \"\",\n// });\n// const titleChangeHandler = (e) => {\n//   setUserInput({\n//     ...userInput,\n//     enteredTitle: e.target.value,\n//   });\n// };\n// const amountChangeHandler = (e) => {\n//   setUserInput({\n//     ...userInput,\n//     enteredAmount: e.target.value,\n//   });\n// };\n// const dateChangeHandler = (e) => {\n//   setUserInput({\n//     ...userInput,\n//     enteredDate: e.target.value,\n//   });\n// };\n\n// if your state updates depending on previous state use this form of state\n// const [userInput, setUserInput] = useState({\n//   enteredTitle: \"\",\n//   enteredAmount: \"\",\n//   enteredDate: \"\",\n// });\n// const titleChangeHandler = (event) => {\n//   setUserInput((prevState) => {\n//     return { ...prevState, enteredTitle: event.target.value };\n//   });\n// };\nvar _c;\n$RefreshReg$(_c, \"ExpenseForm\");","map":{"version":3,"names":["React","useState","ExpenseForm","userInput","setUserInput","enteredTitle","enteredAmount","enteredDate","titleChangeHandler","event","prevState","target","value","amountChangeHandler","e","dateChangeHandler"],"sources":["E:/Shiko/Udemy/React complete guide/Projects/react-guide/src/Components/NewExpense/ExpenseForm.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./ExpenseForm.css\";\r\nconst ExpenseForm = () => {\r\n  const [userInput, setUserInput] = useState({\r\n    enteredTitle: \"\",\r\n    enteredAmount: \"\",\r\n    enteredDate: \"\",\r\n  });\r\n  const titleChangeHandler = (event) => {\r\n    setUserInput((prevState) => {\r\n      return { ...prevState, enteredTitle: event.target.value };\r\n    });\r\n  };\r\n  const amountChangeHandler = (e) => {\r\n    setUserInput((prevState) => {\r\n      return { ...prevState, enteredAmount: e.target.value };\r\n    });\r\n    const dateChangeHandler = (e) => {\r\n      setUserInput((prevState) => {\r\n        return { ...prevState, enteredDate: e.target.value };\r\n      });\r\n    };\r\n    return (\r\n      <form>\r\n        <div className=\"new-expense__controls\">\r\n          <div className=\"new-expense__control\">\r\n            <label>Title</label>\r\n            <input type=\"text\" onChange={titleChangeHandler} />\r\n          </div>\r\n          <div className=\"new-expense__control\">\r\n            <label>Amount</label>\r\n            <input\r\n              type=\"number\"\r\n              min=\"0.01\"\r\n              step=\"0.01\"\r\n              onChange={amountChangeHandler}\r\n            />\r\n            <i>$</i>\r\n          </div>\r\n          <div className=\"new-expense__control\">\r\n            <label>Date</label>\r\n            <input\r\n              type=\"date\"\r\n              min=\"2019-01-01\"\r\n              max=\"2022-12-31\"\r\n              onChange={dateChangeHandler}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"new-expense__actions\">\r\n          <button type=\"submit\">Add Expense</button>\r\n        </div>\r\n      </form>\r\n    );\r\n  };\r\n};\r\nexport default ExpenseForm;\r\n\r\n/*using multiple states   // const [enteredTitle, setEnteredTitle] = useState(\"\");\r\n  // const [enteredDate, setEnteredDate] = useState(\"\");\r\n  // const [enteredAmount, setEnteredAmount] = useState(\"\");\r\n */\r\n\r\n//using single state as an object\r\n// const [userInput, setUserInput] = useState({\r\n//   enteredTitle: \"\",\r\n//   enteredAmount: \"\",\r\n//   enteredDate: \"\",\r\n// });\r\n// const titleChangeHandler = (e) => {\r\n//   setUserInput({\r\n//     ...userInput,\r\n//     enteredTitle: e.target.value,\r\n//   });\r\n// };\r\n// const amountChangeHandler = (e) => {\r\n//   setUserInput({\r\n//     ...userInput,\r\n//     enteredAmount: e.target.value,\r\n//   });\r\n// };\r\n// const dateChangeHandler = (e) => {\r\n//   setUserInput({\r\n//     ...userInput,\r\n//     enteredDate: e.target.value,\r\n//   });\r\n// };\r\n\r\n// if your state updates depending on previous state use this form of state\r\n// const [userInput, setUserInput] = useState({\r\n//   enteredTitle: \"\",\r\n//   enteredAmount: \"\",\r\n//   enteredDate: \"\",\r\n// });\r\n// const titleChangeHandler = (event) => {\r\n//   setUserInput((prevState) => {\r\n//     return { ...prevState, enteredTitle: event.target.value };\r\n//   });\r\n// };\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,mBAAmB;AAAC;AAC3B,MAAMC,WAAW,GAAG,MAAM;EAAA;EACxB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGH,QAAQ,CAAC;IACzCI,YAAY,EAAE,EAAE;IAChBC,aAAa,EAAE,EAAE;IACjBC,WAAW,EAAE;EACf,CAAC,CAAC;EACF,MAAMC,kBAAkB,GAAIC,KAAK,IAAK;IACpCL,YAAY,CAAEM,SAAS,IAAK;MAC1B,OAAO;QAAE,GAAGA,SAAS;QAAEL,YAAY,EAAEI,KAAK,CAACE,MAAM,CAACC;MAAM,CAAC;IAC3D,CAAC,CAAC;EACJ,CAAC;EACD,MAAMC,mBAAmB,GAAIC,CAAC,IAAK;IACjCV,YAAY,CAAEM,SAAS,IAAK;MAC1B,OAAO;QAAE,GAAGA,SAAS;QAAEJ,aAAa,EAAEQ,CAAC,CAACH,MAAM,CAACC;MAAM,CAAC;IACxD,CAAC,CAAC;IACF,MAAMG,iBAAiB,GAAID,CAAC,IAAK;MAC/BV,YAAY,CAAEM,SAAS,IAAK;QAC1B,OAAO;UAAE,GAAGA,SAAS;UAAEH,WAAW,EAAEO,CAAC,CAACH,MAAM,CAACC;QAAM,CAAC;MACtD,CAAC,CAAC;IACJ,CAAC;IACD,oBACE;MAAA,wBACE;QAAK,SAAS,EAAC,uBAAuB;QAAA,wBACpC;UAAK,SAAS,EAAC,sBAAsB;UAAA,wBACnC;YAAA,UAAO;UAAK;YAAA;YAAA;YAAA;UAAA,QAAQ,eACpB;YAAO,IAAI,EAAC,MAAM;YAAC,QAAQ,EAAEJ;UAAmB;YAAA;YAAA;YAAA;UAAA,QAAG;QAAA;UAAA;UAAA;UAAA;QAAA,QAC/C,eACN;UAAK,SAAS,EAAC,sBAAsB;UAAA,wBACnC;YAAA,UAAO;UAAM;YAAA;YAAA;YAAA;UAAA,QAAQ,eACrB;YACE,IAAI,EAAC,QAAQ;YACb,GAAG,EAAC,MAAM;YACV,IAAI,EAAC,MAAM;YACX,QAAQ,EAAEK;UAAoB;YAAA;YAAA;YAAA;UAAA,QAC9B,eACF;YAAA,UAAG;UAAC;YAAA;YAAA;YAAA;UAAA,QAAI;QAAA;UAAA;UAAA;UAAA;QAAA,QACJ,eACN;UAAK,SAAS,EAAC,sBAAsB;UAAA,wBACnC;YAAA,UAAO;UAAI;YAAA;YAAA;YAAA;UAAA,QAAQ,eACnB;YACE,IAAI,EAAC,MAAM;YACX,GAAG,EAAC,YAAY;YAChB,GAAG,EAAC,YAAY;YAChB,QAAQ,EAAEE;UAAkB;YAAA;YAAA;YAAA;UAAA,QAC5B;QAAA;UAAA;UAAA;UAAA;QAAA,QACE;MAAA;QAAA;QAAA;QAAA;MAAA,QACF,eACN;QAAK,SAAS,EAAC,sBAAsB;QAAA,uBACnC;UAAQ,IAAI,EAAC,QAAQ;UAAA,UAAC;QAAW;UAAA;UAAA;UAAA;QAAA;MAAS;QAAA;QAAA;QAAA;MAAA,QACtC;IAAA;MAAA;MAAA;MAAA;IAAA,QACD;EAEX,CAAC;AACH,CAAC;AAAC,GArDIb,WAAW;AAAA,KAAXA,WAAW;AAsDjB,eAAeA,WAAW;;AAE1B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}