{"ast":null,"code":"import { createSlice, configureStore } from \"@reduxjs/toolkit\";\nconst initialState = {\n  todos: [{\n    id: 0,\n    task: \"\",\n    completed: false,\n    isEdit: false,\n    editTodoId: \"\"\n  }]\n};\nfunction nextTodoId(todos) {\n  const maxId = todos.reduce((maxId, todo) => Math.max(todo.id, maxId), -1);\n  return maxId + 1;\n}\nconst taskSlice = createSlice({\n  name: \"tasks\",\n  initialState: initialState,\n  reducers: {\n    addTask: (state, action) => {\n      return {\n        ...state,\n        todos: [...state.todos, {\n          id: nextTodoId(state.todos),\n          task: action.payload,\n          completed: false\n        }]\n      };\n    },\n    AppendTask(state, action) {\n      return {\n        ...state,\n        todos: [...state.todos, action.payload]\n      };\n    },\n    deleteTask: (state, action) => {\n      const deleteTodo = state.todos.filter(todo => todo.id !== action.payload);\n      return {\n        ...state,\n        todos: deleteTodo\n      };\n    },\n    CompletedTask: (state, action) => {\n      return {\n        ...state,\n        todos: state.todos.map(todo => todo.id === action.payload ? {\n          ...todo,\n          completed: !todo.completed\n        } : todo)\n      };\n    },\n    EditTodo: (state, action) => {\n      const newList = [...state.todos];\n      newList.map(todo => {\n        if (todo.id === action.payload) {}\n      });\n      if (index !== -1) {\n        newList[index].value = state.todos.task;\n        return {\n          ...state,\n          task: \"\",\n          edit: false,\n          todos: newList\n        };\n      } else {\n        return {\n          ...state\n        };\n      }\n    }\n  }\n});\nconst store = configureStore({\n  reducer: {\n    tasks: taskSlice.reducer\n  }\n});\nexport const tasksActions = taskSlice.actions;\nexport default store;\n\n// return { ...state, todos: [action.payload, ...state.todos] };\n\n// import { createSlice, configureStore } from \"@reduxjs/toolkit\";\n\n// const initialCounterState = { counter: 0, showCounter: true };\n\n// const counterSlice = createSlice({\n//   name: \"counter\",\n//   initialState: initialCounterState,\n//   reducers: {\n//     increment(state) {\n//       state.counter++;\n//     },\n//     decrement(state) {\n//       state.counter--;\n//     },\n//     increase(state, action) {\n//       state.counter = action.payload;\n//     },\n//     toggleCounter(state) {\n//       state.showCounter = !state.showCounter;\n//     },\n//   },\n// });\n// const initialAuthState = {\n//   isAuthenticated: false,\n// };\n// const authSlice = createSlice({\n//   name: \"authentication\",\n//   initialState: initialAuthState,\n//   reducers: {\n//     login(state) {\n//       state.isAuthenticated = true;\n//     },\n//     logout(state) {\n//       state.isAuthenticated = false;\n//     },\n//   },\n// });\n\n// const store = configureStore({\n//   reducer: { counter: counterSlice.reducer, auth: authSlice.reducer },\n// });\n\n// export const counterActions = counterSlice.actions;\n// export const authActions = authSlice.actions;\n// export default store;\n\n// const counterReducer = (state = initialState, action) => {\n//   if (action.type === \"increment\") {\n//     return {\n//       counter: state.counter + 1,\n//       showCounter: state.showCounter,\n//     };\n//   }\n//   if (action.type === \"decrement\") {\n//     return { counter: state.counter - 1, showCounter: state.showCounter };\n//   }\n//   if (action.type === \"increase\") {\n//     return {\n//       counter: state.counter + action.amount,\n//       showCounter: state.showCounter,\n//     };\n//   }\n//   if (action.type === \"toggle\") {\n//     return {\n//       showCounter: !state.showCounter,\n//       counter: state.counter,\n//     };\n//   }\n//   return state;\n// };\n\n// const store = configureStore({\n//   reducer: {counter: counterSlice.reducer, anotherReducer: anotherSlice.reducer}\n// });","map":{"version":3,"names":["createSlice","configureStore","initialState","todos","id","task","completed","isEdit","editTodoId","nextTodoId","maxId","reduce","todo","Math","max","taskSlice","name","reducers","addTask","state","action","payload","AppendTask","deleteTask","deleteTodo","filter","CompletedTask","map","EditTodo","newList","index","value","edit","store","reducer","tasks","tasksActions","actions"],"sources":["E:/Shiko/GoMyCode/React course/Redux/Redux checkpoint todoList/src/Store/index.js"],"sourcesContent":["import { createSlice, configureStore } from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n  todos: [{ id: 0, task: \"\", completed: false, isEdit: false, editTodoId: \"\" }],\r\n};\r\nfunction nextTodoId(todos) {\r\n  const maxId = todos.reduce((maxId, todo) => Math.max(todo.id, maxId), -1);\r\n  return maxId + 1;\r\n}\r\nconst taskSlice = createSlice({\r\n  name: \"tasks\",\r\n  initialState: initialState,\r\n  reducers: {\r\n    addTask: (state, action) => {\r\n      return {\r\n        ...state,\r\n        todos: [\r\n          ...state.todos,\r\n          {\r\n            id: nextTodoId(state.todos),\r\n            task: action.payload,\r\n            completed: false,\r\n          },\r\n        ],\r\n      };\r\n    },\r\n    AppendTask(state, action) {\r\n      return {\r\n        ...state,\r\n        todos: [...state.todos, action.payload],\r\n      };\r\n    },\r\n    deleteTask: (state, action) => {\r\n      const deleteTodo = state.todos.filter(\r\n        (todo) => todo.id !== action.payload\r\n      );\r\n      return {\r\n        ...state,\r\n        todos: deleteTodo,\r\n      };\r\n    },\r\n    CompletedTask: (state, action) => {\r\n      return {\r\n        ...state,\r\n        todos: state.todos.map((todo) =>\r\n          todo.id === action.payload\r\n            ? { ...todo, completed: !todo.completed }\r\n            : todo\r\n        ),\r\n      };\r\n    },\r\n    EditTodo: (state, action) => {\r\n      const newList = [...state.todos];\r\n      newList.map((todo) => {\r\n        if (todo.id === action.payload) {\r\n        }\r\n      });\r\n      if (index !== -1) {\r\n        newList[index].value = state.todos.task;\r\n        return {\r\n          ...state,\r\n          task: \"\",\r\n          edit: false,\r\n          todos: newList,\r\n        };\r\n      } else {\r\n        return {\r\n          ...state,\r\n        };\r\n      }\r\n    },\r\n  },\r\n});\r\n\r\nconst store = configureStore({\r\n  reducer: { tasks: taskSlice.reducer },\r\n});\r\nexport const tasksActions = taskSlice.actions;\r\nexport default store;\r\n\r\n// return { ...state, todos: [action.payload, ...state.todos] };\r\n\r\n// import { createSlice, configureStore } from \"@reduxjs/toolkit\";\r\n\r\n// const initialCounterState = { counter: 0, showCounter: true };\r\n\r\n// const counterSlice = createSlice({\r\n//   name: \"counter\",\r\n//   initialState: initialCounterState,\r\n//   reducers: {\r\n//     increment(state) {\r\n//       state.counter++;\r\n//     },\r\n//     decrement(state) {\r\n//       state.counter--;\r\n//     },\r\n//     increase(state, action) {\r\n//       state.counter = action.payload;\r\n//     },\r\n//     toggleCounter(state) {\r\n//       state.showCounter = !state.showCounter;\r\n//     },\r\n//   },\r\n// });\r\n// const initialAuthState = {\r\n//   isAuthenticated: false,\r\n// };\r\n// const authSlice = createSlice({\r\n//   name: \"authentication\",\r\n//   initialState: initialAuthState,\r\n//   reducers: {\r\n//     login(state) {\r\n//       state.isAuthenticated = true;\r\n//     },\r\n//     logout(state) {\r\n//       state.isAuthenticated = false;\r\n//     },\r\n//   },\r\n// });\r\n\r\n// const store = configureStore({\r\n//   reducer: { counter: counterSlice.reducer, auth: authSlice.reducer },\r\n// });\r\n\r\n// export const counterActions = counterSlice.actions;\r\n// export const authActions = authSlice.actions;\r\n// export default store;\r\n\r\n// const counterReducer = (state = initialState, action) => {\r\n//   if (action.type === \"increment\") {\r\n//     return {\r\n//       counter: state.counter + 1,\r\n//       showCounter: state.showCounter,\r\n//     };\r\n//   }\r\n//   if (action.type === \"decrement\") {\r\n//     return { counter: state.counter - 1, showCounter: state.showCounter };\r\n//   }\r\n//   if (action.type === \"increase\") {\r\n//     return {\r\n//       counter: state.counter + action.amount,\r\n//       showCounter: state.showCounter,\r\n//     };\r\n//   }\r\n//   if (action.type === \"toggle\") {\r\n//     return {\r\n//       showCounter: !state.showCounter,\r\n//       counter: state.counter,\r\n//     };\r\n//   }\r\n//   return state;\r\n// };\r\n\r\n// const store = configureStore({\r\n//   reducer: {counter: counterSlice.reducer, anotherReducer: anotherSlice.reducer}\r\n// });\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}